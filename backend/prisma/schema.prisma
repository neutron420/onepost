generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  blogs       Blog[]
  comments    Comment[]
  likes       Like[]
  blogViews   BlogView[]
  
  @@map("users")
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  excerpt     String?
  slug        String   @unique
  coverImage  String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  likeCount   Int      @default(0)
  commentCount Int     @default(0)
  viewCount   Int      @default(0)
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  likes       Like[]
  tags        BlogTag[]
  views       BlogView[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([authorId])
  @@index([published])
  @@index([createdAt])
  @@index([slug])
  @@index([likeCount])
  @@map("blogs")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([blogId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

model Like {
  id     String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, blogId])
  @@index([blogId])
  @@map("likes")
}

model Tag {
  id      String    @id @default(cuid())
  name    String    @unique
  slug    String    @unique
  color   String?
  blogs   BlogTag[]
  
  createdAt DateTime @default(now())
  
  @@map("tags")
}

model BlogTag {
  blogId String
  tagId  String
  
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([blogId, tagId])
  @@map("blog_tags")
}

model BlogView {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  ipAddress String?
  userAgent String?
  
  viewedAt  DateTime @default(now())
  
  @@index([blogId])
  @@index([userId])
  @@map("blog_views")
}